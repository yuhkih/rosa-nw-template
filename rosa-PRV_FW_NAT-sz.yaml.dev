# The following will be deployed with this CF
# 1. Three subnets for each AZ. (Thins template is for single AZ)
# 2. AWS firewall deployed with a policy which allow all the domains listed on the ROSA document as prerequistes for egress.
#
# This template will create the following Network Firewall rules
#
#    1) singleaz-DomainAllow-RuleGroup  based on ROSA requirments
#    2) singleaz-SplunkAllow-RuleGroup  based on ROSA requiremnts (Splunk)
#    3) singleaz-DomainAllow-RuleGroup-For-Application   For test perpose +  RHOAM (based on blocked logs)
#    4) singleaz-IcmpAlert-RuleGroup    This crates alert when someone uses ICMP ping in VPC.
#    
# This deploys following network model
#   [Private Subnet] => [ FW Subnet] => [ NATGW(protected) Subnet] 
#   The model is based on the following AWS blog post.
#   https://aws.amazon.com/jp/blogs/networking-and-content-delivery/deployment-models-for-aws-network-firewall-with-vpc-routing-enhancements/
#
#   [Notice!!!] This template can't rewrite default route entry of Natgateway subent "10.0.0.0/16   local " 
#               So, you need to change the entry after delploying this template like below.
#                Destionation    Target              Destination      Target
#               "10.0.0.0/16     local "   =====>   "10.0.0.0/16      fiewall-endpoint-id
#  
# History 
# 2023/01/13 yuhkih Remove duplicated Output
# 2023/01/13 yuhkih add  "catalog.redhat.com" to FW for ?
# 2023/01/14 yuhkih Delete Ingress route table and make the order Private -> Firewall -> NatGw (Still you need to change NATGW route table manually) 
# 2023/01/14 yuhkih Added allow domains to setup an EC2 for Let's Encrypt (needed in case you put the EC2 in ROSA VPC)
#              - "dl.fedoraproject.org"          # Added to setup EC2 for Let's Encrypt
#              - "mirrors.fedoraproject.org"     # Added to setup EC2 for Let's Encrypt
#              - "d2lzkl7pfhq30w.cloudfront.net" # Added to setup EC2 for Let's Encrypt
#              - "epel.mirror.angkasa.id"        # Added to setup EC2 for Let's Encrypt
#              - "ftp.riken.jp"                  # Added to setup EC2 for Let's Encrypt
#              - "ftp.iij.ad.jp"                 # Added to setup EC2 for Let's Encrypt
#              - "supporters.eff.org"            # Added to setup EC2 for Let's Encrypt
# 2023/01/14 yuhkih Export Fierwall subnet id and route tabled id

AWSTemplateFormatVersion: "2010-09-09"
Description: "ROSA sample Single AZ network with FW"

Metadata:
  "AWS::CloudFormation::Interface":
    ParameterGroups:
      - Label:
          default: "VPC Parameters"
        Parameters:
          - AvailabilityZone1Selection
          
Parameters:
  EnvironmentName:
    Description: An environment name that is prefixed to resource names. If you create multiple clusters using this template, you need to change this name to avoid name confliction.
    Type: String
    Default: "singleaz"

  VpcCIDR:
    Description: Please enter the IP range (CIDR notation) for this VPC
    Type: String
    Default: "10.0.0.0/16"

  # Private Network
  Private1CIDR:
    Description: Please enter the IP range (CIDR notation) for Private Netwowrk1
    Type: String
    Default: "10.0.1.0/24"

  # NATGW Network
  NAT1CIDR:
    Description: Please enter the IP range (CIDR notation) for Public (NAT) Netwowrk1
    Type: String
    Default: "10.0.0.0/24"

  # Firewall (Public) Network
  FW1CIDR:
    Description: Please enter the IP range (CIDR notation) for Firewall Netwowrk1
    Type: String
    Default: "10.0.16.0/28"

  AvailabilityZone1Selection:
    Description: Availability Zone 1
    Type: AWS::EC2::AvailabilityZone::Name
    Default: ap-northeast-1a

Resources:
  # VPC:
  VPCA:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: !Ref VpcCIDR
      EnableDnsSupport: true
      EnableDnsHostnames: true
      InstanceTenancy: default
      Tags:
        - Key: Name
          Value: !Sub ${EnvironmentName}-VPC

  # Internet Gateway:
  InternetGateway:
    Type: AWS::EC2::InternetGateway
    Properties:
      Tags:
        - Key: Name
          Value: !Sub ${EnvironmentName}-IGW

  AttachInternetGateway:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      VpcId: !Ref VPCA
      InternetGatewayId: !Ref InternetGateway

  # NAT Gateway:
  NatGw1Eip:
    Type: AWS::EC2::EIP
    Properties:
      Domain: vpc

  NatGw1:
    Type: AWS::EC2::NatGateway
    Properties:
      AllocationId: !GetAtt NatGw1Eip.AllocationId
      SubnetId: !Ref NatgwSubnet1
      Tags:
        - Key: Name
          Value: !Sub ${EnvironmentName}-NATGWA

  # Private Subnets for Test Instances:
  PrivateSubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId:
        Ref: VPCA
      CidrBlock: !Ref Private1CIDR
      AvailabilityZone:
        Ref: AvailabilityZone1Selection
      MapPublicIpOnLaunch: false
      Tags:
        - Key: Name
          Value: !Sub ${EnvironmentName}-Private-Subnet1

  # Subnets for NAT GWs:
  NatgwSubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId:
        Ref: VPCA
      CidrBlock: !Ref NAT1CIDR
      AvailabilityZone:
        Ref: AvailabilityZone1Selection
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value: !Sub ${EnvironmentName}-Natgw-Subnet1

  # Firewall (Public) Subnets for firewall endpoints:
  FirewallSubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId:
        Ref: VPCA
      CidrBlock: !Ref FW1CIDR
      AvailabilityZone:
        Ref: AvailabilityZone1Selection
      MapPublicIpOnLaunch: false
      Tags:
        - Key: Name
          Value: !Sub ${EnvironmentName}-Firewall-Subnet1
        - Key: kubernetes.io/role/elb
          Value: "true"

  # Fn::GetAtt for Firewall do not return VPCE Id in ordered format.
  # For more details refer to: https://github.com/aws-cloudformation/aws-cloudformation-resource-providers-networkfirewall/issues/15
  # Until the bug is fixed we have to rely on custom resource to retrieve AZ specific VPCE Id.

  # Lambda Role:
  LambdaExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub "AnfwLambdaRole-${AWS::Region}"
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action:
              - sts:AssumeRole
      Path: /
      Policies:
        - PolicyName: root
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                Resource: !GetAtt RetrieveVpcIdLogGroup.Arn
              - Effect: Allow
                Action:
                  - network-firewall:DescribeFirewall
                Resource: "*"

  # Retrieve VpceId Lambda Custom Resource:
  RetrieveVpcIdLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub "/${EnvironmentName}-ROSA/OneTimeLambda/RetrieveVpceId-${AWS::Region}"
      RetentionInDays: 1

  RetrieveVpceId:
    Type: AWS::Lambda::Function
    DependsOn: RetrieveVpcIdLogGroup
    Properties:
      FunctionName: !Sub RetrieveVpceId-${AWS::StackName}
      Handler: "index.handler"
      Role: !GetAtt LambdaExecutionRole.Arn
      Code:
        ZipFile: |
          import boto3
          import cfnresponse
          import json
          import logging

          def handler(event, context):
              logger = logging.getLogger()
              logger.setLevel(logging.INFO)
              responseData = {}
              responseStatus = cfnresponse.FAILED
              logger.info('Received event: {}'.format(json.dumps(event)))
              if event["RequestType"] == "Delete":
                  responseStatus = cfnresponse.SUCCESS
                  cfnresponse.send(event, context, responseStatus, responseData)
              if event["RequestType"] == "Create":
                  try:
                      Az1 = event["ResourceProperties"]["Az1"]
                      FwArn = event["ResourceProperties"]["FwArn"]
                  except Exception as e:
                      logger.info('AZ retrieval failure: {}'.format(e))
                  try:
                      nfw = boto3.client('network-firewall')
                  except Exception as e:
                      logger.info('boto3.client failure: {}'.format(e))
                  try:
                      NfwResponse=nfw.describe_firewall(FirewallArn=FwArn)
                      VpceId1 = NfwResponse['FirewallStatus']['SyncStates'][Az1]['Attachment']['EndpointId']

                  except Exception as e:
                      logger.info('ec2.describe_firewall failure: {}'.format(e))

                  responseData['FwVpceId1'] = VpceId1
                  responseStatus = cfnresponse.SUCCESS
                  cfnresponse.send(event, context, responseStatus, responseData)
      Runtime: python3.7
      Timeout: 30

  FirewallVpceIds:
    Type: Custom::DescribeVpcEndpoints
    Properties:
      ServiceToken: !GetAtt RetrieveVpceId.Arn
      Az1: !Ref AvailabilityZone1Selection
      FwArn: !Ref VPCAFirewall

  # Still working on this part
  # https://aws.amazon.com/jp/premiumsupport/knowledge-center/cloudformation-route-table-vpc/
  # https://docs.aws.amazon.com/ja_jp/AWSCloudFormation/latest/UserGuide/cfn-lambda-function-code-cfnresponsemodule.html

  ReplaceDefaultLocalRoute:
    Type: 'AWS::Lambda::Function'
    DependsOn: RetrieveVpcIdLogGroup  # 再利用
    Properties:
      Handler: index.lambda_handler
      Role: !GetAtt LambdaExecutionRole.Arn   # I need to add some policy to this role 
      Runtime: python3.9
      Timeout: 50
      Code:
        ZipFile: |
            from __future__ import print_function
            import json
            import boto3
            import urllib3
            import cfnresponse

            SUCCESS = "SUCCESS"
            FAILED = "FAILED"

            http = urllib3.PoolManager()

            print('Loading function')
            ec2 = boto3.client('ec2')

            def lambda_handler(event, context):
                print("Received event: " + json.dumps(event, indent=2))
                responseData={}
                try:
                    if event['RequestType'] == 'Delete':

                        print("Request Type:",event['RequestType'])
                        print("Delete Request - No Physical resources to delete")

                    elif event['RequestType'] == 'Create':

                        print("Request Type:",event['RequestType'])
                        VPCIDR=event['ResourceProperties']['ArgVpcCIDR']   # argument 1
                        FWEP=event['ResourceProperties']['ArgFwEp1']       # argument 2
                        RTBRTblID=event['ResourceProperties']['ArgRtbId1'] # argument 3
                       # RouteTableID=get_vpc(VPCID) # this is another function.
                       # responseData={'RouteTableID':RouteTableID}
                        NewGatewayId=replace_route(VPCID, VPCIDR,FWEP)
                        responseData={'NewGatewayId':NewGatewayId}
                        print("Sending response to custom resource")

                    elif event['RequestType'] == 'Update':

                        print("Request Type:",event['RequestType'])
                        VPCIDR=event['ResourceProperties']['ArgVpcCIDR']   # argument 1
                        FWEP=event['ResourceProperties']['ArgFwEp1']       # argument 2
                        RTBRTblID=event['ResourceProperties']['ArgRtbId1'] # argument 3
                       #  VpcCIDR=get_vpc(VPCIDR)  # this is another function.
                       #  responseData={'RouteTableID':RouteTableID}
                        NewGatewayId=replace_route(VPCID, VPCIDR,FWEP)
                        responseData={'NewGatewayId':NewGatewayId}
                        print("Sending response to custom resource")

                    # Success Response
                    responseStatus = 'SUCCESS'
                    print("responseStatus: " + responseStatus)
                    cfnresponse.send(event, context, cfnresponse.SUCCESS, responseData, "CustomResourcePhysicalID") # Function NO.3
                except Exception as e:
                    # Failed Response
                    print('Failed to process:', e)
                    responseStatus = 'FAILURE'
                    responseData = {'Failure': 'Something bad happened.'}
                    cfnresponse.send(event, context, cfnresponse.FAILURE, responseData, "CustomResourcePhysicalID")
                    logger.info('route replace failure: {}'.format(e))
            # -------------------------------------------------------
            # def get_vpc(VPCID): 
            #  https://boto3.amazonaws.com/v1/documentation/api/latest/reference/services/ec2.html

            def replace_route(VPCID, VPCIDR,FWEP): 
                print(VPCID)
                print(VPCIDR)
                print(FWEP)

                print("Replace Route in the Route Table ID...")     

                try :         
                  response = ec2.replace_route(                   # Return Nothing
                      DestinationCidrBlock=VPCCIDR,
                        GatewayId=FWEP,                     
                        RouteTableId=RTBRTblID,             
                      )

                except Exception as e:
                    logger.info('ec2.replace_route failure: {}'.format(e))

                # No response so return Tabled ID. Or maybe I should return new GatewayId after getting it again
                return GatewayId
            
            # ------------------------------------------------------
            # Function No.3
            # This is sent to CloudFormation Stack as a success meesage
            def send(event, context, responseStatus, responseData, physicalResourceId=None, noEcho=False):

                responseUrl = event['ResponseURL']
                print(responseUrl)
                responseBody = {'Status': responseStatus,
                                'Reason': 'See the details in CloudWatch Log Stream: ' + context.log_stream_name,
                                'PhysicalResourceId': physicalResourceId or context.log_stream_name,
                                'StackId': event['StackId'],
                                'RequestId': event['RequestId'],
                                'LogicalResourceId': event['LogicalResourceId'],
                                'Data': responseData}
                json_responseBody = json.dumps(responseBody)
                print("Response body:\n" + json_responseBody)
                headers = {
                    'content-type' : '',
                    'content-length' : str(len(json_responseBody))
                }
                try:
                    response = http.request('PUT', responseUrl, headers=headers, body=json_responseBody)
                    print("Status code: " + response.reason)
                except Exception as e:
                    print("send(..) failed executing requests.put(..): " + str(e))
                    logger.info('http.request failure: {}'.format(e))

 # Add New
  ChangeNatGwLocalRoute:
    Type: Custom::ChangeDefaultRoute
    DependsOn: VPCAFirewall
    Properties:
      ServiceToken: !GetAtt ReplaceDefaultLocalRoute.Arn  # The name of the Lambda function
      ArgVpcCIDR: !Ref VpcCIDR                            # VPC CIDR
      ArgFwEp1: !GetAtt FirewallVpceIds.FwVpceId1         # FW Endpoint ID
      ArgRtbId1: !Ref NatgwRtb1                            # NATGW ID   


  # AWS Network Firewall:
  # Inspection Firewall Rule Groups:
  ICMPAlertStatefulRuleGroup:
    Type: AWS::NetworkFirewall::RuleGroup
    Properties:
      RuleGroupName: !Sub ${EnvironmentName}-IcmpAlert-RuleGroup
      Type: STATEFUL
      Capacity: 100
      RuleGroup:
        RulesSource:
          StatefulRules:
            - Action: ALERT
              Header:
                Direction: ANY
                Protocol: ICMP
                Destination: ANY
                Source: ANY
                DestinationPort: ANY
                SourcePort: ANY
              RuleOptions:
                - Keyword: "sid:1"
      Tags:
        - Key: Name
          Value: !Sub ${EnvironmentName}-IcmpAlert-RuleGroup

  #  ROSA FW prerequistes
  #  https://access.redhat.com/documentation/en-us/red_hat_openshift_service_on_aws/4/html/prepare_your_environment/rosa-sts-aws-prereqs#osd-aws-privatelink-firewall-prerequisites_rosa-sts-aws-prereqs
  #  "quay.io" is removed because AWF FW returns error saying that "Targets has duplicate values, parameter: [quay.io]"

  DomainAllowStatefulRuleGroup:
    Type: "AWS::NetworkFirewall::RuleGroup"
    Properties:
      RuleGroupName: !Sub ${EnvironmentName}-DomainAllow-RuleGroup
      Type: STATEFUL
      Capacity: 100
      RuleGroup:
        RuleVariables:
          IPSets:
            HOME_NET:
              Definition:
                - !Ref VpcCIDR
        RulesSource:
          RulesSourceList:
            TargetTypes:
              - HTTP_HOST
              - TLS_SNI
            Targets:
              - "registry.redhat.io"
              - ".quay.io"
              - "sso.redhat.com"
              - "quay-registry.s3.amazonaws.com"
              - "cm-quay-production-s3.s3.amazonaws.com"
              - "cart-rhcos-ci.s3.amazonaws.com"
              - "openshift.org"
              - "registry.access.redhat.com"
              - "console.redhat.com"
              - "pull.q1w2.quay.rhcloud.com"
              - ".q1w2.quay.rhcloud.com"
              - "cert-api.access.redhat.com"
              - "api.access.redhat.com"
              - "infogw.api.openshift.com"
              - "observatorium.api.openshift.comm"
              - ".amazonaws.com"
              - "mirror.openshift.com"
              - "storage.googleapis.com"
              - "api.openshift.com"
              - "api.pagerduty.com"
              - "events.pagerduty.com"
              - "api.deadmanssnitch.com"
              - "nosnch.in"
              - ".osdsecuritylogs.splunkcloud.com"
              - "http-inputs-osdsecuritylogs.splunkcloud.com"
              - "sftp.access.redhat.com"
              - "observatorium-mst.api.openshift.com"
            GeneratedRulesType: "ALLOWLIST"
      Tags:
        - Key: Name
          Value: !Sub ${EnvironmentName}-DomainAllow-RuleGroup

  # Added For splunk
  # Inspection Firewall Rule Groups:
  SplunkAllowStatefulRuleGroup:
    Type: AWS::NetworkFirewall::RuleGroup
    Properties:
      RuleGroupName: !Sub ${EnvironmentName}-SplunkAllow-RuleGroup
      Type: STATEFUL
      Capacity: 100
      RuleGroup:
        RuleVariables:
          IPSets:
            SPLUNK_NET:
              Definition:
                - "18.208.28.131"
                - "3.228.178.155"
                - "34.234.20.22"
                - "54.173.54.28"
                - "3.221.13.106"
        RulesSource:
          StatefulRules:
            - Action: PASS
              Header:
                Direction: FORWARD
                Protocol: TCP
                Destination: ANY
                Source: ANY
                DestinationPort: 9997
                SourcePort: ANY
              RuleOptions:
                - Keyword: "sid:2"
      Tags:
        - Key: Name
          Value: !Sub ${EnvironmentName}-Allow-RuleGroup

  #  FW prerequistes for additional components
  #  Github.io

  DomainAllowStatefulRuleGroupForApp:
    Type: "AWS::NetworkFirewall::RuleGroup"
    Properties:
      RuleGroupName: !Sub ${EnvironmentName}-DomainAllow-RuleGroup-For-Application
      Type: STATEFUL
      Capacity: 100
      RuleGroup:
        RuleVariables:
          IPSets:
            HOME_NET:
              Definition:
                - !Ref VpcCIDR
        RulesSource:
          RulesSourceList:
            TargetTypes:
              - HTTP_HOST
              - TLS_SNI
            Targets:
              - ".github.io"
              - "github.com"
              - "api.github.com" # added for GitHub IdP
              - "acme-v02.api.letsencrypt.org" # Added for Let's Encrypt
              - "acme-staging-v02.api.letsencrypt.org" # Added for Let's Encrypt
              - "dl.fedoraproject.org"          # Added to setup EC2 for Let's Encrypt
              - "mirrors.fedoraproject.org"     # Added to setup EC2 for Let's Encrypt
              - "d2lzkl7pfhq30w.cloudfront.net" # Added to setup EC2 for Let's Encrypt
              - "epel.mirror.angkasa.id"        # Added to setup EC2 for Let's Encrypt
              - "ftp.riken.jp"                  # Added to setup EC2 for Let's Encrypt
              - "ftp.iij.ad.jp"                 # Added to setup EC2 for Let's Encrypt
              - "supporters.eff.org"            # Added to setup EC2 for Let's Encrypt
              - ".openshiftapps.com"  # For public cluster installation. You can narrow down this domain after installation complete to like ".apps.<cluster name>.<random>.<random>.openshiftapps.com"
              - "registry-1.docker.io"              # RHOAM
              - "gcr.io"                            # RHOAM
              - "smtp.sendgrid.net"                 # RHOAM
              - "grafana.com"                       # RHOAM
              - "raw.githubusercontent.com"         # RHOAM
              - "auth.docker.io"                    # RHOAM
              - "production.cloudflare.docker.com"  # RHOAM
              - "codeload.github.com"               # RHOAM
              - "aws.amazon.com"                    # RHOAM
              - "www.redhat.com"                    # RHOAM
              - "www.okd.io"                        # RHOAM
              - "access.redhat.com"                 # RHOAM
              - "observatorium.api.openshift.com"   # RHOAM
              - "objects.githubusercontent.com"     # RHOAM
              - "catalog.redhat.com"                    # This was logged
            GeneratedRulesType: "ALLOWLIST"
      Tags:
        - Key: Name
          Value: !Sub ${EnvironmentName}-DomainAllow-RuleGroup-For-Application

  # VPCA Firewall Policy:
  EgressFirewallPolicy:
    Type: AWS::NetworkFirewall::FirewallPolicy
    Properties:
      FirewallPolicyName: !Sub ${EnvironmentName}-InspectionFirewall-Policy
      FirewallPolicy:
        StatelessDefaultActions:
          - "aws:forward_to_sfe"
        StatelessFragmentDefaultActions:
          - "aws:forward_to_sfe"
        StatefulRuleGroupReferences:
          - ResourceArn: !Ref DomainAllowStatefulRuleGroup
          - ResourceArn: !Ref DomainAllowStatefulRuleGroupForApp
          - ResourceArn: !Ref ICMPAlertStatefulRuleGroup
          - ResourceArn: !Ref SplunkAllowStatefulRuleGroup
      Tags:
        - Key: Name
          Value: !Sub ${EnvironmentName}-InspectionFirewall-Policy

  #VPCA Firewall:
  VPCAFirewall:
    DependsOn:
      [
        ICMPAlertStatefulRuleGroup,
        DomainAllowStatefulRuleGroup,
        DomainAllowStatefulRuleGroupForApp,
        SplunkAllowStatefulRuleGroup,
      ]
    Type: AWS::NetworkFirewall::Firewall
    Properties:
      FirewallName: !Sub ${EnvironmentName}-InspectionFirewall
      FirewallPolicyArn: !Ref EgressFirewallPolicy
      VpcId: !Ref VPCA
      SubnetMappings:
        - SubnetId: !Ref FirewallSubnet1
      Tags:
        - Key: Name
          Value: !Sub ${EnvironmentName}-InspectionFirewall

  #VPCA Firewall Logging:
  VPCAFirewallLogFlowGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub "/${EnvironmentName}-ROSA/Flow"

  VPCAFirewallLogAlertGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub "/${EnvironmentName}-ROSA/Alert"

  VPCAFirewallLog:
    Type: AWS::NetworkFirewall::LoggingConfiguration
    Properties:
      FirewallArn: !Ref VPCAFirewall
      LoggingConfiguration:
        LogDestinationConfigs:
          - LogType: FLOW
            LogDestinationType: CloudWatchLogs
            LogDestination:
              logGroup: !Ref VPCAFirewallLogFlowGroup
          - LogType: ALERT
            LogDestinationType: CloudWatchLogs
            LogDestination:
              logGroup: !Ref VPCAFirewallLogAlertGroup

  # Private Route Tables:
  PrivateRtb1:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPCA
      Tags:
        - Key: Name
          Value: !Sub ${EnvironmentName}-PrivateRouteTable1

  PrivateRtb1Association:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PrivateRtb1
      SubnetId: !Ref PrivateSubnet1

  PrivateRtb1DefaultRoute:
    Type: AWS::EC2::Route
    Properties:
      DestinationCidrBlock: "0.0.0.0/0"
      VpcEndpointId: !GetAtt FirewallVpceIds.FwVpceId1
      RouteTableId: !Ref PrivateRtb1

  # Firewall Route Tables:
  FirewallRtb1:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPCA
      Tags:
        - Key: Name
          Value: !Sub ${EnvironmentName}-FirewallRouteTable1

  FirewallRtb1Association:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref FirewallRtb1
      SubnetId: !Ref FirewallSubnet1

  FirewallRtb1DefaultRoute:
    Type: AWS::EC2::Route
    Properties:
      DestinationCidrBlock: "0.0.0.0/0"
      NatGatewayId: !Ref NatGw1
      RouteTableId: !Ref FirewallRtb1

  # NATGW Route Tables:
  NatgwRtb1:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPCA
      Tags:
        - Key: Name
          Value: !Sub ${EnvironmentName}-NatgwRouteTable1

  NatgwRtb1Association:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref NatgwRtb1
      SubnetId: !Ref NatgwSubnet1

  NatgwRtb1DefaultRoute:
    Type: AWS::EC2::Route
    DependsOn: VPCAFirewall
    Properties:
      DestinationCidrBlock: "0.0.0.0/0"
      GatewayId: !Ref InternetGateway 
      RouteTableId: !Ref NatgwRtb1

Outputs:
  MyStacksRegion:
    Value: !Ref "AWS::Region"

  RosaVpcCIDR:
    Value: !Ref VpcCIDR
    Export:
      Name: vpc-cidr-rosa

  RosaVpcID:
    Value: !Ref VPCA
    Export:
      Name: vpc-id-rosa


  RosaPrivateSubnetID1:
    Value: !Ref PrivateSubnet1
    Export:
      Name: private-subnet-id1-rosa

  RosaNatGwSubnetID1:
    Value: !Ref NatgwSubnet1
    Export:
      Name: natgw-subnet-id1-rosa
  
  RosaFwSubnetID1:
    Value: !Ref FirewallSubnet1
    Export:
      Name: fw-subnet-id1-rosa

  RosaPrivateRouteTableID1:
    Value: !Ref PrivateRtb1
    Export:
      Name: private-rtb-id1-rosa

  RosaNatGwRouteTableID1:
    Value: !Ref NatgwRtb1
    Export:
      Name: natgw-rtb-id1-rosa

  RosaFwRouteTableID1:
    Value: !Ref FirewallRtb1
    Export:
      Name: fw-rtb-id1-rosa